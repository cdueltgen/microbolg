Setting up your virtual environment

This is meant to replace the virtual env setup in the flask megatutorial.

Assumptions:
-You are already using Python 2.7
-You have installed pip and virtualenv on your system

To check your version of python type:

% python --version

To check whether you have pip and virtualenv installed, type:

% which pip
% which virtualenv

These should return something that looks like:
/usr/local/bin/pip

If it returns nothing you do not have virtualenv and pip installed. If you need help installing these, please find one of us to help you with that.

Once you have virtualenv ready to go, go to your source directory for your project and create your virtual environment with the command:

% virtualenv <env-name>

You can call your virtualenv whatever you would like. It doesn't matter. In the mega tutorial, he calls his environment 'flask'. Just call it something you will remember. I will use 'flask' for this doc to reduce confusion.

To activate the virtual environment the command is:

% source flask/bin/activate

To deactivate the environment, the command is:

% deactivate

Note that you need to feed it the path to your virtual environment to activate it so that it sets your paths correctly. You do not need the path when you deactivate since deactivate is a command that comes with virtualenv.

So let's go ahead and activate our environment now. I'll wait. Good.

Is your virtual environment active? Just checking. Now, grab the requrements.txt file from my github (https://github.com/cdueltgen/microbolg/blob/master/requirements.txt) and put it in your project directory.

Then, to install the requirements, the command is:

% pip install -r requirements.txt

This will take a while and spew a lot of text to your window. The final result you are looking for is:

Successfully installed Babel Flask Flask-Babel Flask-Login Flask-OpenID Flask-SQLAlchemy Flask-WTF Flask-WhooshAlchemy Jinja2 SQLAlchemy Tempita WTForms Werkzeug Whoosh blinker decorator flup python-openid pytz speaklater sqlalchemy-migrate
Cleaning up...

If the last thing before you get your prompt back doesn't say this, something went wrong. Find one of us to help you out.

 Now, let's talk a moment about your project repository and the .gitignore file. By default, your shell will not show you files or directories that start with a dot(.). To see these files, you need to feed the -a flag to ls. If you have already run git init in your project directory, ls -a will show you a .git directory.

Since we have the ability to recreate your virtual environment from the requirements file, it's a good practice to exclude your virtual environment from your repository. This can be done with the use of a .gitignore file. Virtual environments can be quite large, and it's a bad idea to upload them to github or track them in your repository.

You can tell git to ingnore whole directories or files with certain types of extensions using regular expressions.

A sample .gitignore for Python is here:
https://github.com/github/gitignore/blob/master/Python.gitignore

You can grab this file and rename it to .gitignore, or just make your own for this project. Most importantly, we need to tell it to ignore our environment, so put the following lines at the top of the file:

# vitualenv
flask

(where flask is the directory name of your virtual environment if you named it something other than flask)

We now return you to the flask meagtutorial, resuming at "Hello, World" in Flask